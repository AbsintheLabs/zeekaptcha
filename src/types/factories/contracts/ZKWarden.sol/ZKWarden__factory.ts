/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  ZKWarden,
  ZKWardenInterface,
} from "../../../contracts/ZKWarden.sol/ZKWarden";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_verifier",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "AlreadyProved",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidInput",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidProof",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidUserAddress",
    type: "error",
  },
  {
    inputs: [],
    name: "NotCaptchaManager",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "OwnableInvalidOwner",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "OwnableUnauthorizedAccount",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "newManager",
        type: "address",
      },
    ],
    name: "CaptchaManagerUpdated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "newRoot",
        type: "uint256",
      },
    ],
    name: "MerkleRootUpdated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferStarted",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "nullifierHash",
        type: "uint256",
      },
    ],
    name: "Verified",
    type: "event",
  },
  {
    inputs: [],
    name: "acceptOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "getRoot",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "nullifierHash",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "pendingOwner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newcaptchaManager",
        type: "address",
      },
    ],
    name: "setCaptchaManager",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "newroot",
        type: "uint256",
      },
    ],
    name: "updateRoot",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256[24]",
        name: "_proof",
        type: "uint256[24]",
      },
      {
        internalType: "uint256[3]",
        name: "_input",
        type: "uint256[3]",
      },
    ],
    name: "verify",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60806040523480156200001157600080fd5b50604051620011713803806200117183398181016040528101906200003791906200030a565b33600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603620000ad5760006040517f1e4fbdf7000000000000000000000000000000000000000000000000000000008152600401620000a491906200034d565b60405180910390fd5b620000be81620001a360201b60201c565b5080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555033600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507ff5b5f1644beed3c3313508b2646b18eacdad75e7fb2effcd32dfafa6efabf7d7600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040516200019491906200034d565b60405180910390a1506200036a565b600160006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055620001d981620001dc60201b60201c565b50565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620002d282620002a5565b9050919050565b620002e481620002c5565b8114620002f057600080fd5b50565b6000815190506200030481620002d9565b92915050565b600060208284031215620003235762000322620002a0565b5b60006200033384828501620002f3565b91505092915050565b6200034781620002c5565b82525050565b60006020820190506200036460008301846200033c565b92915050565b610df7806200037a6000396000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c80637feabbeb116100665780637feabbeb146101215780638da5cb5b1461013d578063bcfd3d471461015b578063e30c397814610177578063f2fde38b146101955761009e565b8063307c21d4146100a35780635ca1e165146100d35780636cfc73ba146100f1578063715018a61461010d57806379ba509714610117575b600080fd5b6100bd60048036038101906100b89190610a24565b6101b1565b6040516100ca9190610a6c565b60405180910390f35b6100db6101d1565b6040516100e89190610a96565b60405180910390f35b61010b60048036038101906101069190610afa565b6101db565b005b6101156104b8565b005b61011f6104cc565b005b61013b60048036038101906101369190610b9a565b61055b565b005b61014561069d565b6040516101529190610bd6565b60405180910390f35b61017560048036038101906101709190610a24565b6106c6565b005b61017f61078e565b60405161018c9190610bd6565b60405180910390f35b6101af60048036038101906101aa9190610b9a565b6107b8565b005b60056020528060005260406000206000915054906101000a900460ff1681565b6000600354905090565b6000816000600381106101f1576101f0610bf1565b5b6020020135905060008260016003811061020e5761020d610bf1565b5b6020020135905060008360026003811061022b5761022a610bf1565b5b602002013590506005600084815260200190815260200160002060009054906101000a900460ff161561028a576040517ff96adda600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60035482146102c5576040517f09bde33900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff168114610314576040517f702b3d9000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168660405180606001604052808681526020018781526020018581525060405160240161037c929190610ce5565b604051602081830303815290604052631d5803fe60e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516103ce9190610d81565b6000604051808303816000865af19150503d806000811461040b576040519150601f19603f3d011682016040523d82523d6000602084013e610410565b606091505b505090508061044b576040517f09bde33900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60016005600086815260200190815260200160002060006101000a81548160ff0219169083151502179055507f7c4bd613345b3aec2140d4c4c96782cda06d72b1a593fbb20a72300354f4c33633856040516104a8929190610d98565b60405180910390a1505050505050565b6104c0610865565b6104ca60006108ec565b565b60006104d661091d565b90508073ffffffffffffffffffffffffffffffffffffffff166104f761078e565b73ffffffffffffffffffffffffffffffffffffffff161461054f57806040517f118cdaa70000000000000000000000000000000000000000000000000000000081526004016105469190610bd6565b60405180910390fd5b610558816108ec565b50565b610563610865565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614806105eb5750600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16145b15610622576040517fb4fa3fb300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507ff5b5f1644beed3c3313508b2646b18eacdad75e7fb2effcd32dfafa6efabf7d7816040516106929190610bd6565b60405180910390a150565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461074d576040517fceb8aa9000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b806003819055507f3ee94a330b3a2d0451c3863014f4175fee871947fc526006b5c7fc72973f674a816040516107839190610a96565b60405180910390a150565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6107c0610865565b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff1661082061069d565b73ffffffffffffffffffffffffffffffffffffffff167f38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e2270060405160405180910390a350565b61086d61091d565b73ffffffffffffffffffffffffffffffffffffffff1661088b61069d565b73ffffffffffffffffffffffffffffffffffffffff16146108ea576108ae61091d565b6040517f118cdaa70000000000000000000000000000000000000000000000000000000081526004016108e19190610bd6565b60405180910390fd5b565b600160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905561091a81610925565b50565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600080fd5b6000819050919050565b610a01816109ee565b8114610a0c57600080fd5b50565b600081359050610a1e816109f8565b92915050565b600060208284031215610a3a57610a396109e9565b5b6000610a4884828501610a0f565b91505092915050565b60008115159050919050565b610a6681610a51565b82525050565b6000602082019050610a816000830184610a5d565b92915050565b610a90816109ee565b82525050565b6000602082019050610aab6000830184610a87565b92915050565b600080fd5b600081905082602060180282011115610ad257610ad1610ab1565b5b92915050565b600081905082602060030282011115610af457610af3610ab1565b5b92915050565b6000806103608385031215610b1257610b116109e9565b5b6000610b2085828601610ab6565b925050610300610b3285828601610ad8565b9150509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610b6782610b3c565b9050919050565b610b7781610b5c565b8114610b8257600080fd5b50565b600081359050610b9481610b6e565b92915050565b600060208284031215610bb057610baf6109e9565b5b6000610bbe84828501610b85565b91505092915050565b610bd081610b5c565b82525050565b6000602082019050610beb6000830184610bc7565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b82818337505050565b610c366103008383610c20565b5050565b600060039050919050565b600081905092915050565b6000819050919050565b610c63816109ee565b82525050565b6000610c758383610c5a565b60208301905092915050565b6000602082019050919050565b610c9781610c3a565b610ca18184610c45565b9250610cac82610c50565b8060005b83811015610cdd578151610cc48782610c69565b9650610ccf83610c81565b925050600181019050610cb0565b505050505050565b600061036082019050610cfb6000830185610c29565b610d09610300830184610c8e565b9392505050565b600081519050919050565b600081905092915050565b60005b83811015610d44578082015181840152602081019050610d29565b60008484015250505050565b6000610d5b82610d10565b610d658185610d1b565b9350610d75818560208601610d26565b80840191505092915050565b6000610d8d8284610d50565b915081905092915050565b6000604082019050610dad6000830185610bc7565b610dba6020830184610a87565b939250505056fea264697066735822122013412334e216d8ff951f372ce6d1e45d98e71d960a4b050fcb3d9dbf4e8cccab64736f6c63430008140033";

type ZKWardenConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ZKWardenConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ZKWarden__factory extends ContractFactory {
  constructor(...args: ZKWardenConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    _verifier: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(_verifier, overrides || {});
  }
  override deploy(
    _verifier: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(_verifier, overrides || {}) as Promise<
      ZKWarden & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): ZKWarden__factory {
    return super.connect(runner) as ZKWarden__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ZKWardenInterface {
    return new Interface(_abi) as ZKWardenInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): ZKWarden {
    return new Contract(address, _abi, runner) as unknown as ZKWarden;
  }
}
