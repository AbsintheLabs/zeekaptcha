/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface ZKWardenInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "acceptOwnership"
      | "getRoot"
      | "nullifierHash"
      | "owner"
      | "pendingOwner"
      | "renounceOwnership"
      | "setCaptchaManager"
      | "transferOwnership"
      | "updateRoot"
      | "verify"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "CaptchaManagerUpdated"
      | "MerkleRootUpdated"
      | "OwnershipTransferStarted"
      | "OwnershipTransferred"
      | "Verified"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "acceptOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getRoot", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "nullifierHash",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingOwner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setCaptchaManager",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateRoot",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "verify",
    values: [BigNumberish[], [BigNumberish, BigNumberish, BigNumberish]]
  ): string;

  decodeFunctionResult(
    functionFragment: "acceptOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getRoot", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nullifierHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCaptchaManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "updateRoot", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "verify", data: BytesLike): Result;
}

export namespace CaptchaManagerUpdatedEvent {
  export type InputTuple = [newManager: AddressLike];
  export type OutputTuple = [newManager: string];
  export interface OutputObject {
    newManager: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MerkleRootUpdatedEvent {
  export type InputTuple = [newRoot: BigNumberish];
  export type OutputTuple = [newRoot: bigint];
  export interface OutputObject {
    newRoot: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferStartedEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VerifiedEvent {
  export type InputTuple = [to: AddressLike, nullifierHash: BigNumberish];
  export type OutputTuple = [to: string, nullifierHash: bigint];
  export interface OutputObject {
    to: string;
    nullifierHash: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ZKWarden extends BaseContract {
  connect(runner?: ContractRunner | null): ZKWarden;
  waitForDeployment(): Promise<this>;

  interface: ZKWardenInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  acceptOwnership: TypedContractMethod<[], [void], "nonpayable">;

  getRoot: TypedContractMethod<[], [bigint], "view">;

  nullifierHash: TypedContractMethod<[arg0: BigNumberish], [boolean], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  pendingOwner: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setCaptchaManager: TypedContractMethod<
    [newcaptchaManager: AddressLike],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  updateRoot: TypedContractMethod<
    [newroot: BigNumberish],
    [void],
    "nonpayable"
  >;

  verify: TypedContractMethod<
    [
      _proof: BigNumberish[],
      _input: [BigNumberish, BigNumberish, BigNumberish]
    ],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "acceptOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getRoot"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "nullifierHash"
  ): TypedContractMethod<[arg0: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pendingOwner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setCaptchaManager"
  ): TypedContractMethod<
    [newcaptchaManager: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateRoot"
  ): TypedContractMethod<[newroot: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "verify"
  ): TypedContractMethod<
    [
      _proof: BigNumberish[],
      _input: [BigNumberish, BigNumberish, BigNumberish]
    ],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "CaptchaManagerUpdated"
  ): TypedContractEvent<
    CaptchaManagerUpdatedEvent.InputTuple,
    CaptchaManagerUpdatedEvent.OutputTuple,
    CaptchaManagerUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "MerkleRootUpdated"
  ): TypedContractEvent<
    MerkleRootUpdatedEvent.InputTuple,
    MerkleRootUpdatedEvent.OutputTuple,
    MerkleRootUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferStarted"
  ): TypedContractEvent<
    OwnershipTransferStartedEvent.InputTuple,
    OwnershipTransferStartedEvent.OutputTuple,
    OwnershipTransferStartedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Verified"
  ): TypedContractEvent<
    VerifiedEvent.InputTuple,
    VerifiedEvent.OutputTuple,
    VerifiedEvent.OutputObject
  >;

  filters: {
    "CaptchaManagerUpdated(address)": TypedContractEvent<
      CaptchaManagerUpdatedEvent.InputTuple,
      CaptchaManagerUpdatedEvent.OutputTuple,
      CaptchaManagerUpdatedEvent.OutputObject
    >;
    CaptchaManagerUpdated: TypedContractEvent<
      CaptchaManagerUpdatedEvent.InputTuple,
      CaptchaManagerUpdatedEvent.OutputTuple,
      CaptchaManagerUpdatedEvent.OutputObject
    >;

    "MerkleRootUpdated(uint256)": TypedContractEvent<
      MerkleRootUpdatedEvent.InputTuple,
      MerkleRootUpdatedEvent.OutputTuple,
      MerkleRootUpdatedEvent.OutputObject
    >;
    MerkleRootUpdated: TypedContractEvent<
      MerkleRootUpdatedEvent.InputTuple,
      MerkleRootUpdatedEvent.OutputTuple,
      MerkleRootUpdatedEvent.OutputObject
    >;

    "OwnershipTransferStarted(address,address)": TypedContractEvent<
      OwnershipTransferStartedEvent.InputTuple,
      OwnershipTransferStartedEvent.OutputTuple,
      OwnershipTransferStartedEvent.OutputObject
    >;
    OwnershipTransferStarted: TypedContractEvent<
      OwnershipTransferStartedEvent.InputTuple,
      OwnershipTransferStartedEvent.OutputTuple,
      OwnershipTransferStartedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Verified(address,uint256)": TypedContractEvent<
      VerifiedEvent.InputTuple,
      VerifiedEvent.OutputTuple,
      VerifiedEvent.OutputObject
    >;
    Verified: TypedContractEvent<
      VerifiedEvent.InputTuple,
      VerifiedEvent.OutputTuple,
      VerifiedEvent.OutputObject
    >;
  };
}
